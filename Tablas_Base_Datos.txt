-- Crear base de datos
CREATE DATABASE Estancia CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE Estancia;

-- Crear base de datos
CREATE DATABASE IF NOT EXISTS Estancia CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE Estancia;

-- 1. Tabla base: usuarios (todos los roles)
CREATE TABLE usuarios (
    nip VARCHAR(20) PRIMARY KEY,
    nombre VARCHAR(100),
    correo VARCHAR(100),
    telefono VARCHAR(20),
    rol ENUM('familiar', 'admin', 'cuidador', 'cocina', 'medico', 'enfermeria', 'kinesica') NOT NULL DEFAULT 'familiar'
);

-- 2. Tabla pacientes (depende de usuarios)
CREATE TABLE pacientes (
    id_paciente INT AUTO_INCREMENT PRIMARY KEY,
    nip VARCHAR(20) NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    fecha_nacimiento DATE NOT NULL,
    telefono VARCHAR(15),
    condiciones TEXT,
    foto VARCHAR(255),
    FOREIGN KEY (nip) REFERENCES usuarios(nip) ON DELETE CASCADE
);

-- 3. Tablas dependientes de usuarios (según rol)
CREATE TABLE medicos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nip VARCHAR(20) UNIQUE,
    nombre VARCHAR(100),
    correo VARCHAR(100),
    telefono VARCHAR(20),
    especialidad VARCHAR(100) DEFAULT 'General',
    FOREIGN KEY (nip) REFERENCES usuarios(nip) ON DELETE CASCADE
);

CREATE TABLE cuidadores (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nip VARCHAR(20) UNIQUE,
    nombre VARCHAR(100),
    correo VARCHAR(100),
    telefono VARCHAR(20),
    turno VARCHAR(100) DEFAULT 'Diurno',
    FOREIGN KEY (nip) REFERENCES usuarios(nip) ON DELETE CASCADE
);

CREATE TABLE cocineros (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nip VARCHAR(20) UNIQUE,
    nombre VARCHAR(100),
    correo VARCHAR(100),
    telefono VARCHAR(20),
    FOREIGN KEY (nip) REFERENCES usuarios(nip) ON DELETE CASCADE
);

CREATE TABLE enfermeria (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nip VARCHAR(20) UNIQUE,
    nombre VARCHAR(100),
    correo VARCHAR(100),
    FOREIGN KEY (nip) REFERENCES usuarios(nip)
);

CREATE TABLE kinesica (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nip VARCHAR(20) UNIQUE,
    nombre VARCHAR(100),
    correo VARCHAR(100),
    FOREIGN KEY (nip) REFERENCES usuarios(nip)
);

-- 4. Tabla cocina (menú diario)
CREATE TABLE cocina (
    id INT AUTO_INCREMENT PRIMARY KEY,
    fecha DATE NOT NULL,
    desayuno VARCHAR(255),
    comida VARCHAR(255),
    cena VARCHAR(255)
);

-- 5. Ingredientes y uso
CREATE TABLE ingredientes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL UNIQUE,
    cantidad_disponible FLOAT NOT NULL DEFAULT 0,
    unidad ENUM(
        'gramos', 'kilogramos', 'miligramos',
        'litros', 'mililitros', 'centilitros',
        'unidad', 'piezas', 'docena', 'paquete',
        'botella', 'lata', 'galones', 'libras', 'onzas'
    ) NOT NULL DEFAULT 'unidad'
);

CREATE TABLE reportes_cocina (
    id INT AUTO_INCREMENT PRIMARY KEY,
    fecha DATE NOT NULL,
    notas TEXT
);

CREATE TABLE ingredientes_usados (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_reporte INT NOT NULL,
    id_ingrediente INT NOT NULL,
    cantidad_utilizada FLOAT NOT NULL,
    FOREIGN KEY (id_reporte) REFERENCES reportes_cocina(id) ON DELETE CASCADE,
    FOREIGN KEY (id_ingrediente) REFERENCES ingredientes(id) ON DELETE CASCADE
);

-- 6. Reportes diversos
CREATE TABLE consumo_comidas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_paciente INT NOT NULL,
    fecha DATE NOT NULL,
    hora TIME NOT NULL,
    tipo_comida ENUM('desayuno', 'comida', 'cena') NOT NULL,
    platillo_consumido VARCHAR(255),
    FOREIGN KEY (id_paciente) REFERENCES pacientes(id_paciente) ON DELETE CASCADE
);

CREATE TABLE expedientes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_paciente INT NOT NULL,
    fecha_ultima_revision DATE,
    notas TEXT,
    FOREIGN KEY (id_paciente) REFERENCES pacientes(id_paciente) ON DELETE CASCADE
);
CREATE TABLE signos_vitales (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_paciente INT NOT NULL,
    fecha DATE NOT NULL,
    ta_sistolica SMALLINT,
    ta_diastolica SMALLINT,
    fc SMALLINT,
    fr SMALLINT,
    sat_o2 TINYINT,
    glucemia SMALLINT,
    temp DECIMAL(3,1),
    FOREIGN KEY (id_paciente) REFERENCES pacientes(id_paciente) ON DELETE CASCADE
);

CREATE TABLE notificaciones (
    id INT AUTO_INCREMENT PRIMARY KEY,
    titulo VARCHAR(100) NOT NULL,
    mensaje TEXT NOT NULL,
    fecha DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE reporte_kinesico (
    id_reporte INT AUTO_INCREMENT PRIMARY KEY,
    id_paciente INT NOT NULL,
    id_kinesiologo VARCHAR(20) NOT NULL,
    fecha DATE NOT NULL,
    ejercicios TEXT,
    duracion INT,
    observaciones TEXT,
    progreso TEXT,
    FOREIGN KEY (id_paciente) REFERENCES pacientes(id_paciente) ON DELETE CASCADE,
    FOREIGN KEY (id_kinesiologo) REFERENCES usuarios(nip) ON DELETE CASCADE
);

CREATE TABLE reportes_generales (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_paciente INT NOT NULL,
    nip_usuario VARCHAR(20) NOT NULL,
    fecha DATE NOT NULL,
    
    -- Campos específicos de enfermería
    medicamentos TEXT,                -- Número de medicamentos
    via VARCHAR(100),               -- Vía de administración (oral, IV, etc.)
    horario VARCHAR(100),           -- Horario de administración
    procedimientos TEXT,            -- Procedimientos realizados
    evacuaciones TEXT,
    orina TEXT,
    vomito TEXT,

    -- Campos específicos de cuidador
    agua BOOLEAN,                   -- Si tomó agua
    colacion BOOLEAN,               -- Si tomó colación
    comio BOOLEAN,                  -- Si comió

    -- Campo común
    observaciones TEXT,

    FOREIGN KEY (id_paciente) REFERENCES pacientes(id_paciente) ON DELETE CASCADE,
    FOREIGN KEY (nip_usuario) REFERENCES usuarios(nip) ON DELETE CASCADE
);



CREATE TABLE reportes_medicos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_paciente INT NOT NULL,
    id_medico INT NOT NULL,
    fecha DATE NOT NULL,
    sueno TEXT,
    dieta TEXT,
    esfera_emocional TEXT,
    memoria TEXT,
    micciones TEXT,
    peso DECIMAL(5,2),
    talla SMALLINT,
    imc DECIMAL(4,1),
    otros_signos TEXT,
    analisis TEXT,
    plan TEXT,
    creado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    actualizado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (id_paciente) REFERENCES pacientes(id_paciente) ON DELETE CASCADE,
    FOREIGN KEY (id_medico) REFERENCES medicos(id) ON DELETE CASCADE,
    INDEX idx_fecha (fecha),
    INDEX idx_paciente (id_paciente),
    INDEX idx_medico (id_medico)
);

-- 7. TRIGGERS (después de que todas las tablas existen)
DELIMITER $$

CREATE TRIGGER trigger_insert_medico
AFTER INSERT ON usuarios
FOR EACH ROW
BEGIN
    IF NEW.rol = 'medico' THEN
        INSERT INTO medicos (nip, nombre, correo, telefono)
        VALUES (NEW.nip, NEW.nombre, NEW.correo, NEW.telefono);
    END IF;
END$$

CREATE TRIGGER trigger_insert_cuidador
AFTER INSERT ON usuarios
FOR EACH ROW
BEGIN
    IF NEW.rol = 'cuidador' THEN
        INSERT INTO cuidadores (nip, nombre, correo, telefono)
        VALUES (NEW.nip, NEW.nombre, NEW.correo, NEW.telefono);
    END IF;
END$$

CREATE TRIGGER trigger_insert_cocina
AFTER INSERT ON usuarios
FOR EACH ROW
BEGIN
    IF NEW.rol = 'cocina' THEN
        INSERT INTO cocineros (nip, nombre, correo, telefono)
        VALUES (NEW.nip, NEW.nombre, NEW.correo, NEW.telefono);
    END IF;
END$$

CREATE TRIGGER insertar_enfermeria
AFTER INSERT ON usuarios
FOR EACH ROW
BEGIN
    IF NEW.rol = 'enfermeria' THEN
        INSERT INTO enfermeria (nip, nombre, correo)
        VALUES (NEW.nip, NEW.nombre, NEW.correo);
    END IF;
END$$

CREATE TRIGGER insertar_kinesica
AFTER INSERT ON usuarios
FOR EACH ROW
BEGIN
    IF NEW.rol = 'kinesica' THEN
        INSERT INTO kinesica (nip, nombre, correo)
        VALUES (NEW.nip, NEW.nombre, NEW.correo);
    END IF;
END$$

-- Trigger para descontar inventario de ingredientes
CREATE TRIGGER descontar_ingredientes
AFTER INSERT ON ingredientes_usados
FOR EACH ROW
BEGIN
    UPDATE ingredientes
    SET cantidad_disponible = cantidad_disponible - NEW.cantidad_utilizada
    WHERE id = NEW.id_ingrediente;
END$$

DELIMITER ;

-- 8. Usuario administrador inicial (opcional)
INSERT INTO usuarios (nombre, correo, nip, rol)
VALUES ('Administrador', 'admin@uta.com', '1234', 'admin');




////
Usuario administrador de ejemplo (opcional)
INSERT INTO usuarios (nombre, correo, nip, rol)
VALUES ('Administrador', 'admin@uta.com', '1234', 'admin');
